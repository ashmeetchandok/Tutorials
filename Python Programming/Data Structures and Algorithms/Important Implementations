{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 5)\n"
     ]
    }
   ],
   "source": [
    "#Linear Search Algorithm\n",
    "def LinearSearch(ar, item):\n",
    "    i = 0\n",
    "    for i in range(len(ar)):\n",
    "        if ar[i] == item:\n",
    "            pos = ar.index(item)\n",
    "            return pos,i\n",
    "\n",
    "    return -1\n",
    "\n",
    "ar = [0,1,2,3,4,5,6,7,8]\n",
    "item = 5\n",
    "print(LinearSearch(ar, item))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Found element', 6)\n"
     ]
    }
   ],
   "source": [
    "#Binary Search of Elements\n",
    "def BinarySearch(ar, item):\n",
    "    beg = 0\n",
    "    last = len(ar) - 1\n",
    "    while beg <= last:\n",
    "        mid = (beg+last)//2\n",
    "        if item == ar[mid]:\n",
    "            return \"Found element\", mid\n",
    "        elif item > ar[mid]:\n",
    "            beg = mid + 1\n",
    "        else:\n",
    "            last = mid - 1\n",
    "    return -1\n",
    "ar = [0,1,2,3,4,6,7,8,10]\n",
    "item = 7\n",
    "print(BinarySearch(ar, item))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "#Recursive Binary Search\n",
    "def BinSearch(l,item):\n",
    "    mid = len(l)//2\n",
    "    if (len(l)-1) > l[0]:\n",
    "        if l[mid] == item:\n",
    "            return \"Found\", True\n",
    "        elif item < l[mid]:\n",
    "            return BinSearch(l[:mid],item)\n",
    "        else:\n",
    "            return BinSearch(l[mid+1:],item)\n",
    "    else:\n",
    "        return False\n",
    "ar = [0,1,2,3,4,5,6,7,8]\n",
    "item = 10\n",
    "print(BinSearch(ar, item))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 4, 5, 5, 6, 7, 7]\n",
      "[0, 1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 7]\n"
     ]
    }
   ],
   "source": [
    "#Insertion using Bisect\n",
    "import bisect\n",
    "ar = [0,3,5,6,7,1,5,7,1,2,4]\n",
    "ar.sort()\n",
    "print(ar)\n",
    "bisect.insort(ar, 4)\n",
    "print(ar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 3, 4, 5, 6, 7, 8]\n",
      "6\n",
      "[0, 1, 2, 3, 4, 5, 7, 8]\n"
     ]
    }
   ],
   "source": [
    "#Deletion of elements\n",
    "def BinarySearch(ar,item):\n",
    "    beg = 0\n",
    "    last = len(ar) - 1\n",
    "    for i in range(len(ar)):\n",
    "        mid = (beg+last)//2\n",
    "        if ar[mid] == item:\n",
    "            return mid\n",
    "        elif item > ar[mid]:\n",
    "            beg = mid + 1\n",
    "        else:\n",
    "            last = mid - 1\n",
    "    return -1\n",
    "ar = [0,1,2,3,4,5,6,7,8]\n",
    "print(ar)\n",
    "item = 6\n",
    "pos = BinarySearch(ar,item)\n",
    "print(pos)\n",
    "if pos:\n",
    "    del ar[pos]\n",
    "    print(ar)\n",
    "else:\n",
    "    print(\"Not Found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 gap 4 gap 6 gap 7 gap 1 gap 2 gap 3 gap 6 gap 7 gap 10 gap "
     ]
    }
   ],
   "source": [
    "#Traversing a list\n",
    "ar = [3,4,6,7,1,2,3,6,7,10]\n",
    "for i in ar:\n",
    "    print(i, end = \" gap \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[4, 5]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Stack Implementation \n",
    "class Stack:\n",
    "    def __init__(self): #Intializing the stack\n",
    "        self.stack = []\n",
    "    \n",
    "    def isEmpty(self): #Checking if it is empty or not\n",
    "        return self.stack == []\n",
    "    \n",
    "    def push(self, item): #Pushing an element into the stack\n",
    "        self.stack.append(item)\n",
    "    \n",
    "    def pop(self): #Removing an element from the last\n",
    "        return self.stack.pop(-1)\n",
    "    \n",
    "    def peek(self): #Sneak Peak \n",
    "        if self.stack != []:\n",
    "            return self.stack[-1]\n",
    "    \n",
    "    def get_stack(self): #Returns the complete stack\n",
    "        return self.stack\n",
    "\n",
    "s = Stack()\n",
    "s.push(4)\n",
    "s.push(5)\n",
    "s.get_stack()\n",
    "s.push(6)\n",
    "s.peek()\n",
    "s.pop()\n",
    "s.get_stack()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5, 6]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Queue Implementation\n",
    "class Queue:\n",
    "    def __init__(self): #Initialzing the Queue\n",
    "        self.queue = []\n",
    "    \n",
    "    def isEmpty(self): #Checking if the queue is empty or not\n",
    "        return self.queue == []\n",
    "    \n",
    "    def enqueue(self, item): #Appending item in the queue\n",
    "        self.queue.append(item)\n",
    "    \n",
    "    def dequeue(self): #Deleting the first element\n",
    "        self.queue.pop(0)\n",
    "    \n",
    "    def peek(self): #Sneaky Peaky\n",
    "        return self.queue[0]\n",
    "    \n",
    "    def get_queue(self): #Returns the entire Queue\n",
    "        return self.queue\n",
    "\n",
    "q = Queue()\n",
    "q.isEmpty()\n",
    "q.enqueue(4)\n",
    "q.enqueue(5)\n",
    "q.enqueue(6)\n",
    "q.get_queue()\n",
    "q.peek()\n",
    "q.dequeue()\n",
    "q.get_queue()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original [15, 99, 4, 30, 56]\n",
      "New [4, 15, 30, 56, 99]\n"
     ]
    }
   ],
   "source": [
    "#Bubble Sort\n",
    "l = [15,99,4,30,56]\n",
    "print(\"Original\", l)\n",
    "n = len(l)\n",
    "for i in range(n):\n",
    "    for j in range(0, n-i-1):\n",
    "        if l[j] > l[j+1]:\n",
    "            l[j],l[j+1] = l[j+1],l[j]\n",
    "\n",
    "print(\"New\", l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[4, 15, 30, 56, 99]\n"
     ]
    }
   ],
   "source": [
    "#Insertion Sort\n",
    "l = [15,99,4,30,56]\n",
    "n = len(l)\n",
    "for i in range(1, n):\n",
    "    key = l[i]\n",
    "    j = i - 1\n",
    "    while j >= 0 and key < l[j]:\n",
    "        l[j+1] = l[j]\n",
    "        j = j-1\n",
    "    else:\n",
    "        l[j+1] = key\n",
    "print(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
